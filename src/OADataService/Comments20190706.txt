Для создания сервиса данных, я использовал шаблон Web Api. Предполагаю, что сдесь будет развернуто 
два сервиса: сервис доступа к документам и сервис базы данных. Сервис доступа к документам будет 
предоставлять документы для работы клиентов, напр. фотки, видео, аудио, плоский текст, XML, JSON. 
Соответственно, HTTP MIME ContentType будет: 
text/plain, text/json, text,xml
image/jpeg, video/..., audio/mp3

Тексты будут иметь кодировку UTF-8

Для начала, сделаю получение изображений. 


Другие документы (пока) 

### 20190707 08:31
Приехал на побывку домой и начал разработку. Еще вчера я пробовал делать контроллер документов DocsController. Суть контроллера - почти 
соответствует REST. Это хранимое множество документов разного типа. Думаю можно следовать идеям REST. В частности, доступ к хранимым 
документам будет выглядеть как-то так: 
http://domain.ext/OAData/docs/img - для выдачи всех
http://domain.ext/OAData/docs/img/uri - для выдачи одного

Кроме того, будет загружаться конфигурация. 
А еще будут загружаться и уничтожаться документы. Для некоторых действий понадобится авторизация. Авторизацию можно реализовывать с 
помощью кукиз. Но это - потом. 

Файлы могут быть любыми. Файловые сборки пока не поддерживаются. Специальный тип касается того, что выводится отдельно и, возможно, 
в подгружается браузером. Попробую pdf. ... Попробовал, работает. Буду действовать постепенно. Все начинается с конфигуратора. Создам 
класс Configuration и загружу конфигуратор. Пока никаких особых манипуляций с конфигуратором делать не буду.

Файл конфигуратора загрузил. Также сделал страницу по умолчанию. Потом можно будет к этой странице вернуться...

Теперь сделаю и загружу структуры помогающие доступу к кассетам и фог-документам.

### 20190708 13:16
Сделал ввод данных из кассет. Формируется массив информации о кассетах и другой массив информации о фог-документах. 
Надо будет сделать фиксацию проблем загрузки кассет и диагностику на диагностической странице. Вообще, пока нет 
концепции управления сервисом, надо будет разработать. Двинусь в сторону получения документа.

Теперь испытал последнюю из неопробованных возмжностей: получение документа. Все работает, хотя остаются вопросы. 
В частности, вопросом является как именовать полученный файл. Было бы замечательно этот вопрос унифицировать. Так,
чтобы у любого файла из архива, было уникальное имя. Может, что-то такое и будет. Напр. длинное имя можно сжать и 
превратить в какой-то идентификатор. Но так, чтобы по идентификатору, можно было бы восстановить uri документа. Пока
я на этом вопросе останавливаться не буду. 

Теперь надо сделать получение основных документов. В частности, фотки и фог-файла. Вообще, REST диктует иметь методы,
перечисленные выше. Все фотки выдавать нет необходимости, выдам одну. Попробую также научиться задавать дополнительный 
параметр. 

### 20190709 07:53
Попробовал, все получилось. Я затратил слишком много времени на адаптацию к идеям REST. В нынешнем варианте - не получается
У меня uri сформировано с использованием слешей, это мешает их использованию в конструкции типа http://domain.ext/OAData/docs/img/uri 
Попытка закодировать uri - пока не получается. В частности, использованию компрессора мешает малая длина. Из строки uri 
длиной в 32 байта можно получить после zip'а 144 байта, так что путь закрыт. Буду использовать нормальные параметры. 

Еще одна неприятность - в тестовой кассете SypCassete. Там нет типоразмера normal. Попробую посмотреть что можно сделать. 
Можно сделать специальный административный программируемый интерфейс и просто сделать фотки нужного размера из существующих.
С помощью LINQ-выражений. Пока его можно наметить в сервисе. Тем более, что именно там будут преобрабатываться документы.

В общем, поработал, но как-то не нацеленно... В частности, снова поискал способ работы с имиджами. Фактически вернулся к решениям 
базовой библиотеки. Пока такие решения меня удовлетворяют. Другие как-то даже не запускаются. Теперь сделаю небольшое продвижение 
к проекту. Декларирую метод котроллера:
```
```

Итак, я сделал основу сервиса данных. Он хранит важную информацию для быстрого доступа к данным. Он обеспечивает доступ к документам
по uri. Так что можно уже начинать обслуживать прикладные интерфейсы.

### 20190710 07:43
Можно и нужно продолжать. И я знаю в каком направлении. Мне нужен полноценный сервис данных. Он состоит из репозитория документов,
доступных по некоторому uri, и базы данных, предоставляющих данные по идентификатору. Возможно, еще и по формату. И репозиторий 
документов и база данных способны к добавлению и изменению данных. Изменения в базе данных первично, поскольку его можно выполнять 
не меняя структуры репозитория. База данных формируется из совокупности всех задействованных фог-документов. Фог-документы содержат
идентифицированные записи. База данных изменяется посредством добавления записей. Записи имеют отметку времени mT и более поздние
по времени записи "заслоняют" более ранние. Большая часть изменений в данных может производиться в динамике работы сервиса. Однако
есть еще и перезагрузка сервиса. Ее можно и нужно делать в определенных случаях. Во-первых, перезагрузку надо делать регулярно для 
того, чтобы не накапливались большие динамические структуры, связанные с обновлением данных. Во-вторых, есть действия с репозиторием
и данными, которые не воспроизводятся в базе данных автоматически. Например, изменение состава репозитория, "ручные" воздействия на 
репозиторий, ручные воздействия на записи данных. Система сделана так, чтобы вручную можно было бы сделать "все" не нарушащее 
синтаксическую структуру данных. И не нарушающее структуру кассетного хранилища. Но в будущем, набор "ручных" действий будет 
регламентирован и автоматизирован. 

Перезагрузка создает по-новой динамические структуры, помогающие осуществлять доступ к репозиторию и к данным. Динамическая структура
к данным, называется текущей базой данных. База данных, в общем случае, состоит из формируемой структуры записей и индексов. А также 
структур, формируемых в оперативной памяти. Есть более "легковесный" процесс запуска репозитория и базы данных, его можно назвать 
подключением. Это, напр. когда сервер перезапускался и надо запустить сервис. И есть более "тяжелый" процесс с формированием новой 
текущей базы. Этот процесс называем перезагрузкой и он может длиться довольно долго (сейчас секунды и десятки секунд, с ростом данных -
еще дольше). С точностью до завершения процессов записи в файлы репозитория, перезагрузку можно инициировать в любой момент времени.    

Пора приступить хоть к каким-то действиям. Попробую сделать загрузку базы данных. 

### 20190711 22:08
Так и не приступил... Вообще, голова тяжелая и медленная...

Сейчас уже понятно, что кусок 2019 года я в базу данных вряд ли сделаю в течение школы. Может после школы... Только кто будет описывать 
хотя бы фотографии? Буду думать о будущем. Сегодня решил, что одним из возможных вариантов испытания/использования сервиса, может быть
старая схема раскрытия айтема. Узел раскрывается на нулевом уровне - это просто запись. Следующий (первый) уровнень раскрытия включает
в себя обратные и прямые записи. Только надо блокировать прямые ссылки, соответствующие обратным ссылкам. Это как всегда. Но это - потом.
Сначала сервис. Сначала сервис без изменения данных. Это я могу написать легко. 









