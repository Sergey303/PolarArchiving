
### 20200718 11:24

Я разрываюсь между тем, чтобы сделать самый универсальный случай вьюера и тем, чтобы использовать спецификации и строить таблицы. 

Попробую универсальный. Пусть запись будет таблицей полей и прямых ссылок. Первая колонка - свойства, вторая колонка - значение. Если 
это ссылка, то, если она есть, путь будет какое-то имя с гиперссылкой на айтем.

Расширенная запись состоит из записи и обратных запесей, т.е. обратного предиката и записи, ссылающейся на данную, причем в записи не 
вопроизводитя ссылка, по которой "пришли" к этой записи.

Рассмотрим некоторую новую схему формиования элементов портрета. Портрет записи формируется как ряд элементов, упорядоченных по значениям 
предикатов. То есть, если есть последовательность пар {предикат, значение}, то она превращается в ряд через сопоставление с последовательностью 
предикатов. Эту последовательность предикатов назовем заголовками. Откуда берется последовательность предикатов? Она может быть задана внешним 
образом или сформирована из пар или доформирована из пар. 

Таким образом, в самом общем случае, по последовательности пар формируются заголовки, потом формируется ряд. Заголовки не должны быть 
структурированными. Главное - какой тип значения имеется за соответствующим заголовком. Это может быть DatatypeProperty или ObjectProperty.
Возможно следуюет также задать тип значения для более корректной обработки. Причем тип значения важен и для полей и для ссылок. 

Сформирую предположение: структура такого заголовка может быть сформирована как формат. Например:
<record id="..." type="...">
    <field prop="..." />
	<direct prop="..." />
	...
</record>

Можно и без record, через последовательность элементов.  

### 20200719 09:21
Пора попробовать. Сначала сделаю главную таблицу основных полей. 

Возникли некоторые проблемы с Mat-таблицей, так что пока решил использовать обычную HTML-таблицу. Кроме того, я не очень понимаю как 
запроцедуривать сложные построения, поэтому буду делать циклом. Небольшой повтор кода будет, но пока это не должно волновать.

Итак, какую структуру надо будет подготовить по запросу на портрет? По идее, структура должна выглядеть как:
class Relations
{
	public string inverseprop, typ;
	public string[] headers;
	public string[][] rels;
}

Причем для главной таблицы inverseprop = null, а количество пар - ровно одна.

Указанная структура имеет тот недостаток, что нет информации о том, какие поля есть ссылки. В общем, я постоянно возвращаюсь к тому, что лучшим
вариантом представления данных похоже является (информационная) развертка. В обычной развертке есть некоторые недоделки, которые надо бы доделать.
Во-первых - они располагают поля и директы в произвольном порядке, а они нужны в зафиксированном порядке. В этом зафиксированном порядке могут быть 
еще пропуски, их также нет. Кроме того, группирование не производится или производится произвольным образом. Еще один недостаток последнего 
представления в том, что значения помечаются как строки. А это не совсем так, для директов это могут быть более развитые структуры. 

А если - компромис? Допустим, я использую форматное построение. Порядок элементов - определен, вид свойства - определен, структура значения - определена.
Даже дыры в данных определены. Как-то так. Остается собрать значение в нужном порядке. Что-ли попробую...

### 20200720 06:56
Оставлю рассуждения о компромисе. Сделаю композицию "в столбик" и в 2 колонки. Будут общие рядки, когда колонки объединяются, будут раздельные - это поля,
в которых есть имя поля и значение поля. Итак, композиция для изображения айтема будет следующей:
тип айтема
набор полей: имя поля - значение поля
набор обратных полей: имя обратного свойства, тип отношения, набор полей и директов. Имя свойства и тип отношения располагаются в отдельной строке,
далее, идут поля и директы в колонку. Директ раскрывается как имя в виде гиперссылки. В этом месте носитилем гиперссылки могут быть: значение поля name,
фотка или иконка документа. Видимо надо пробовать...


https://localhost:5001/Docs/GetPhoto?s=normal&u=iiss://Cassette_test20180311@iis.nsk.su/0001/0001/0001

