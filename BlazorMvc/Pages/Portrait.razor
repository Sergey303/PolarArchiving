@page "/portrait"
@page "/portrait/{Id}"
@using System.Xml.Linq
@using BlazorMvc.Data;

<MatTooltip Tooltip="Item type" Wrap="true">
    @*<span>Span with Wrapper</span>*@
    <MatSelect Label="подбор типа" @bind-Value="typ">
        <MatOptionString></MatOptionString>
        <MatOptionString Value="http://fogid.net/o/person">Персона</MatOptionString>
        <MatOptionString Value="http://fogid.net/o/org-sys">Орг. сист.</MatOptionString>
    </MatSelect>
</MatTooltip>


<MatTooltip Tooltip="Search text" Wrap="true">
    <MatTextField Label="Поисовый образец" @bind-Value="searchstring"></MatTextField>
</MatTooltip>

<MatTooltip Tooltip="Search" Wrap="true">
    <MatButton @onclick="Search">Search</MatButton>
</MatTooltip>



@*<div> @typ </div>
    <h3>Portrait @Id</h3>

    <div> @searchstring </div>
    <button class="btn btn-primary" @onclick="Search">Click me</button>*@


<div>
    @if (yresults != null)
    {
        foreach (var y in yresults)
        {
            <div>
                @y[0]
                <a href="Portrait/@y[1]">@y[2]</a>
            </div>
        }
    }
</div>

@if (Id != null)
{
<table border=1>
    <tr>
        <td colspan="2" style="background-color: lightgreen">
            @xportrait.Attribute("type").Value
        </td>
    </tr>
    @foreach (var xelement in xportrait.Elements("field"))
    {
        <tr>
            <td>
                @xelement.Attribute("prop").Value
            </td>
            <td>
                @xelement.Value
            </td>
        </tr>
        @if (xelement.Attribute("prop").Value == "http://fogid.net/o/uri")
        {
            <tr><td colspan="2"><img src="Docs/GetPhoto?s=normal&u=@xelement.Value" /></td></tr>
        }
    }
    @foreach (var inv in xportrait.Elements("inverse"))
    {
        string prop = inv.Attribute("prop").Value;
        XElement rel = inv.Element("record");
        string reltype = rel.Attribute("type").Value;
        <tr><td colspan="2" style="background-color: aquamarine">@prop @reltype</td></tr>
        @foreach (var xel in rel.Elements())
        {
            <tr>
                <td>
                    @xel.Attribute("prop").Value
                </td>
                <td>
                    @if (xel.Name == "field")
                    {
                        @xel.Value
                    }
                    else
                    {
                        XElement re = xel.Element("record");
                        string idd = re.Attribute("id").Value;
                        string tp = re.Attribute("type").Value;
                        string uri = tp == "http://fogid.net/o/photo-doc" ? DService.GetField(re, "http://fogid.net/o/uri") : null;
                        string nm = DService.GetField(re, "http://fogid.net/o/name");
                    <a href='Portrait/@idd'>
                        @if (uri != null)
                        {
                            <img src="Docs/GetPhoto?s=small&u=@uri" />
                        }
                        else
                        {
                            <span>@nm</span>
                        }
                    </a>
                    }
                </td>
            </tr>
        }
    }

</table>

    

@*<div>@xportrait.ToString()</div>*@

}


@code {
            string typ = null;

            [Parameter]
            public string Id { get; set; }

            private string searchstring = null;
            private string[][] yresults = null;
            private XElement xport = null;
            private XElement xportrait = null;





            protected override void OnParametersSet()
            {
                searchstring = "";
                yresults = null;
                if (Id != null) // Построим портрет
                {
                    xport = DService.GetItemByIdBasic(Id, true);
                    xportrait = new XElement("record",
                        new XAttribute(xport.Attribute("id")),
                        new XAttribute(xport.Attribute("type")),
                        xport.Elements("field"),
                        xport.Elements("inverse")
                            .Select(inv =>
                            {
                                string prop = inv.Attribute("prop").Value;
                                string idd = inv.Element("record").Attribute("id").Value;
                                XElement relation = DService.GetItemByIdBasic(idd, false);
                                if (relation == null) return null;
                                XElement record = new XElement("record", new XAttribute("id", idd), new XAttribute(relation.Attribute("type")),
                                    relation.Elements().Select<XElement, XElement>(fldinv =>
                                    {
                                    if (fldinv.Name == "field")
                                    {
                                        return new XElement(fldinv);
                                    }
                                    else if (fldinv.Name == "direct")
                                    {
                                        string pr = fldinv.Attribute("prop").Value;
                                        if (pr == prop) return null;
                                        string iddd = fldinv.Element("record").Attribute("id").Value;
                                        XElement rec = DService.GetItemByIdBasic(iddd, false);
                                        if (rec == null) return null;
                                        //string nm = DService.GetField(rec, "http://fogid.net/o/name");
                                        return new XElement("direct", new XAttribute("prop", pr),
                                            new XElement(rec));
                                    }
                                    return null;
                }));
                return new XElement("inverse", new XAttribute("prop", prop),  record);
            }),
                null);
        }
    }

    private void Search()
    {
        yresults = DService.Search(searchstring).ToArray();
        Id = null;
    }
    private void Goto(string idd)
    {
        yresults = null;
    }

}
